{
  "info": {
    "name": "DocuPilot Backend API",
    "description": "API collection for DocuPilot project management system. Handles project creation, management, and Docusaurus integration.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "apiUrl",
      "value": "{{baseUrl}}/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the API server is running and healthy"
      },
      "response": [
        {
          "name": "Successful Health Check",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"status\": \"OK\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"service\": \"DocuPilot Backend API\"\n}"
        }
      ]
    },
    {
      "name": "Create Project",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"projectTitle\": \"My Awesome Project\",\n  \"repositoryUrl\": \"https://github.com/username/my-awesome-project.git\",\n  \"branchName\": \"main\",\n  \"description\": \"A comprehensive documentation project for my awesome application\"\n}"
        },
        "url": {
          "raw": "{{apiUrl}}/create-project",
          "host": ["{{apiUrl}}"],
          "path": ["create-project"]
        },
        "description": "Create a new project with repository cloning and Docusaurus integration"
      },
      "response": [
        {
          "name": "Successful Project Creation",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectTitle\": \"My Awesome Project\",\n  \"repositoryUrl\": \"https://github.com/username/my-awesome-project.git\",\n  \"branchName\": \"main\",\n  \"description\": \"A comprehensive documentation project\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/create-project",
              "host": ["{{apiUrl}}"],
              "path": ["create-project"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"message\": \"Project created successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"My Awesome Project\",\n    \"slug\": \"my-awesome-project\",\n    \"repository_url\": \"https://github.com/username/my-awesome-project.git\",\n    \"branch_name\": \"main\",\n    \"description\": \"A comprehensive documentation project\",\n    \"creator\": \"username\",\n    \"status\": \"active\",\n    \"created_at\": \"2024-01-15T10:30:00.000Z\",\n    \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n  },\n  \"output\": \"Repository cloned successfully\"\n}"
        },
        {
          "name": "Missing Required Fields",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectTitle\": \"My Project\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/create-project",
              "host": ["{{apiUrl}}"],
              "path": ["create-project"]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"message\": \"Project title and repository URL are required\"\n}"
        },
        {
          "name": "Invalid Repository URL",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectTitle\": \"My Project\",\n  \"repositoryUrl\": \"invalid-url\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/create-project",
              "host": ["{{apiUrl}}"],
              "path": ["create-project"]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"message\": \"Please provide a valid repository URL (http://, https://, git@host:user/repo.git, or ssh://git@host/path/repo.git)\"\n}"
        },
        {
          "name": "Project Already Exists",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectTitle\": \"Existing Project\",\n  \"repositoryUrl\": \"https://github.com/username/existing-project.git\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/create-project",
              "host": ["{{apiUrl}}"],
              "path": ["create-project"]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"message\": \"A project with this title already exists. Please choose a different project title or delete the existing project first.\"\n}"
        }
      ]
    },
    {
      "name": "List Projects",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/projects?limit=50&offset=0",
          "host": ["{{apiUrl}}"],
          "path": ["projects"],
          "query": [
            {
              "key": "limit",
              "value": "50",
              "description": "Maximum number of projects to return"
            },
            {
              "key": "offset",
              "value": "0",
              "description": "Number of projects to skip"
            },
            {
              "key": "search",
              "value": "",
              "description": "Search term to filter projects",
              "disabled": true
            }
          ]
        },
        "description": "Get a list of all projects with optional pagination and search"
      },
      "response": [
        {
          "name": "Successful Project List",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/projects",
              "host": ["{{apiUrl}}"],
              "path": ["projects"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"projects\": [\n    {\n      \"id\": 1,\n      \"title\": \"My Awesome Project\",\n      \"slug\": \"my-awesome-project\",\n      \"repository_url\": \"https://github.com/username/my-awesome-project.git\",\n      \"branch_name\": \"main\",\n      \"description\": \"A comprehensive documentation project\",\n      \"creator\": \"username\",\n      \"status\": \"active\",\n      \"created_at\": \"2024-01-15T10:30:00.000Z\",\n      \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n    }\n  ],\n  \"total\": 1\n}"
        }
      ]
    },
    {
      "name": "Search Projects",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/projects?search=awesome&limit=10",
          "host": ["{{apiUrl}}"],
          "path": ["projects"],
          "query": [
            {
              "key": "search",
              "value": "awesome",
              "description": "Search term to filter projects"
            },
            {
              "key": "limit",
              "value": "10",
              "description": "Maximum number of projects to return"
            }
          ]
        },
        "description": "Search for projects using a search term"
      },
      "response": [
        {
          "name": "Successful Search Results",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/projects?search=awesome",
              "host": ["{{apiUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "search",
                  "value": "awesome"
                }
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"projects\": [\n    {\n      \"id\": 1,\n      \"title\": \"My Awesome Project\",\n      \"slug\": \"my-awesome-project\",\n      \"repository_url\": \"https://github.com/username/my-awesome-project.git\",\n      \"branch_name\": \"main\",\n      \"description\": \"A comprehensive documentation project\",\n      \"creator\": \"username\",\n      \"status\": \"active\",\n      \"created_at\": \"2024-01-15T10:30:00.000Z\",\n      \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n    }\n  ],\n  \"total\": 1\n}"
        }
      ]
    },
    {
      "name": "Get Project by Slug",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/projects/my-awesome-project",
          "host": ["{{apiUrl}}"],
          "path": ["projects", "my-awesome-project"]
        },
        "description": "Get details of a specific project by its slug"
      },
      "response": [
        {
          "name": "Successful Project Details",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/projects/my-awesome-project",
              "host": ["{{apiUrl}}"],
              "path": ["projects", "my-awesome-project"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"My Awesome Project\",\n    \"slug\": \"my-awesome-project\",\n    \"repository_url\": \"https://github.com/username/my-awesome-project.git\",\n    \"branch_name\": \"main\",\n    \"description\": \"A comprehensive documentation project\",\n    \"creator\": \"username\",\n    \"status\": \"active\",\n    \"created_at\": \"2024-01-15T10:30:00.000Z\",\n    \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n  }\n}"
        },
        {
          "name": "Project Not Found",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/projects/non-existent-project",
              "host": ["{{apiUrl}}"],
              "path": ["projects", "non-existent-project"]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"message\": \"Project not found\"\n}"
        }
      ]
    },
    {
      "name": "Delete Project",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/projects/my-awesome-project",
          "host": ["{{apiUrl}}"],
          "path": ["projects", "my-awesome-project"]
        },
        "description": "Permanently delete a project (removes database record, files, and Docusaurus config)"
      },
      "response": [
        {
          "name": "Successful Delete",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/projects/my-awesome-project",
              "host": ["{{apiUrl}}"],
              "path": ["projects", "my-awesome-project"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"message\": \"Project deleted successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"My Awesome Project\",\n    \"slug\": \"my-awesome-project\",\n    \"repository_url\": \"https://github.com/username/my-awesome-project.git\",\n    \"branch_name\": \"main\",\n    \"description\": \"A comprehensive documentation project\",\n    \"creator\": \"username\",\n    \"status\": \"active\",\n    \"created_at\": \"2024-01-15T10:30:00.000Z\",\n    \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n  }\n}"
        }
      ]
    },
    {
      "name": "Get Statistics",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/statistics",
          "host": ["{{apiUrl}}"],
          "path": ["statistics"]
        },
        "description": "Get project statistics and metrics"
      },
      "response": [
        {
          "name": "Successful Statistics",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/statistics",
              "host": ["{{apiUrl}}"],
              "path": ["statistics"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"data\": {\n    \"total_projects\": 5,\n    \"active_projects\": 4,\n    \"deleted_projects\": 1,\n    \"projects_by_creator\": {\n      \"username1\": 3,\n      \"username2\": 2\n    },\n    \"recent_projects\": [\n      {\n        \"title\": \"Latest Project\",\n        \"slug\": \"latest-project\",\n        \"created_at\": \"2024-01-15T10:30:00.000Z\"\n      }\n    ]\n  }\n}"
        }
      ]
    },
    {
      "name": "404 Not Found",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/non-existent-endpoint",
          "host": ["{{apiUrl}}"],
          "path": ["non-existent-endpoint"]
        },
        "description": "Example of hitting a non-existent endpoint"
      },
      "response": [
        {
          "name": "Endpoint Not Found",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/non-existent-endpoint",
              "host": ["{{apiUrl}}"],
              "path": ["non-existent-endpoint"]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"message\": \"Endpoint not found\"\n}"
        }
      ]
    }
  ],
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for logging",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test script for basic response validation",
          "pm.test('Status code is not 500', function () {",
          "    pm.expect(pm.response.code).to.not.equal(500);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const responseJson = pm.response.json();",
          "    pm.expect(responseJson).to.have.property('success');",
          "});",
          "",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ]
}